{
  "address": "0x5b4f6F099D5178209e032644B1184bFe906de836",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "commitToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "salesToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "hardCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimBonusTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimSalesFirstPartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingBeginTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingProportion",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minCommit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxCommit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSales",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "whitelist",
              "type": "address"
            }
          ],
          "internalType": "struct OverflowICO.SetUpParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commit",
          "type": "uint256"
        }
      ],
      "name": "ClaimBonus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refund",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sales",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commit",
          "type": "uint256"
        }
      ],
      "name": "ClaimRefund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sales",
          "type": "uint256"
        }
      ],
      "name": "ClaimSalesFirstPart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimVesting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Commit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VESTING_DISTRIBUTION_DM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimBonusTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRefund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimSalesFirstPart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimSalesFirstPartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "claimVesting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimableTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum IWhitelist.TypeNft",
          "name": "typeNft",
          "type": "uint8"
        }
      ],
      "name": "commit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitDm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitTakenAway",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "finalCommit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "finalSales",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finish",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCommitExcess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "userCommitments",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salesToReceive",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commitToReceive",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commitToRefund",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedSales",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockedSales",
              "type": "uint256"
            }
          ],
          "internalType": "struct OverflowICO.UserInfo",
          "name": "userInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserState",
      "outputs": [
        {
          "internalType": "enum OverflowICO.UserPresaleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hardCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "immutableCommitments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCommit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minCommit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salesPerCommit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salesToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "softCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "started",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCommitToBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCommitments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSales",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingBeginTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingProportion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "contract IWhitelist",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x52fe5150ebd8347c1a73f50aa50efa4af386418609c3853394bc020bcad02f09",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0x98e923e8D5f9E09AB87319dCEC36F17b95d48b7a",
    "transactionIndex": 2,
    "gasUsed": "2985586",
    "logsBloom": "0x
    "blockHash": "0x96d70b600bc91293826281f59a63b9db5b466eb6863c2973d530d4e30e4a98f2",
    "transactionHash": "0x52fe5150ebd8347c1a73f50aa50efa4af386418609c3853394bc020bcad02f09",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 3994349,
        "transactionHash": "0x52fe5150ebd8347c1a73f50aa50efa4af386418609c3853394bc020bcad02f09",
        "address": "0x98e923e8D5f9E09AB87319dCEC36F17b95d48b7a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x96d70b600bc91293826281f59a63b9db5b466eb6863c2973d530d4e30e4a98f2"
      }
    ],
    "blockNumber": 3994349,
    "cumulativeGasUsed": "3067174",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "commitToken": "0xB79DD08EA68A908A97220C76d19A6aA9cBDE4376",
      "salesToken": "0xA3d1a8DEB97B111454B294E2324EfAD13a9d8396",
      "hardCap": 500000000000,
      "softCap": 350000000000,
      "startTime": 1695038400,
      "endTime": 1695639600,
      "claimBonusTime": 1695639610,
      "claimSalesFirstPartTime": 1696244400,
      "vestingBeginTime": 1696244401,
      "vestingDuration": 2419200,
      "vestingProportion": "750000000000000000",
      "minCommit": 1000000,
      "maxCommit": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
      "totalSales": "25000000000000000000000",
      "whitelist": "0x35451Cc764414119cb9c9aa30aAA0f0BBb02EaE8"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "fb8432d4cc2db2d6cd9f40077b5f1884",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"commitToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"salesToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimBonusTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimSalesFirstPartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingBeginTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingProportion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCommit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCommit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSales\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"whitelist\",\"type\":\"address\"}],\"internalType\":\"struct OverflowICO.SetUpParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commit\",\"type\":\"uint256\"}],\"name\":\"ClaimBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sales\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commit\",\"type\":\"uint256\"}],\"name\":\"ClaimRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sales\",\"type\":\"uint256\"}],\"name\":\"ClaimSalesFirstPart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Commit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VESTING_DISTRIBUTION_DM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBonusTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimSalesFirstPart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimSalesFirstPartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"claimVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum IWhitelist.TypeNft\",\"name\":\"typeNft\",\"type\":\"uint8\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitDm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitTakenAway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"finalCommit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"finalSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommitExcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userCommitments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitToRefund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedSales\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedSales\",\"type\":\"uint256\"}],\"internalType\":\"struct OverflowICO.UserInfo\",\"name\":\"userInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserState\",\"outputs\":[{\"internalType\":\"enum OverflowICO.UserPresaleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"immutableCommitments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCommit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCommit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesPerCommit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCommitToBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCommitments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingBeginTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"contract IWhitelist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimBonus()\":{\"details\":\"Claim bonus (rebase) USD+ Executing only after \\\"claimRefund\\\" Transfer bonus USD+ to user.\"},\"claimRefund()\":{\"details\":\"Claim extra USD+ if total_commit > hard_cap Executing only after end pre-sale. Transfer extra USD+ to user. Calculating also next params: - finalSales (total OVN user should to get) - finalCommit  (total rebase of USD+ user should to get)\"},\"claimSalesFirstPart()\":{\"details\":\"Claim 1 first part of OVN (25% depends from vestingProportion) Executing only after \\\"claimBonus\\\" Transfer OVN to user.\"},\"claimVesting(address)\":{\"details\":\"Claim unlock OVN tokens by time (vesting) Transfer OVN to user.\"},\"commit(uint256,uint256,uint8)\":{\"details\":\"Buy SalesTokens (OVN) for commitTokens (USD+) Execute only by User User should to have Whitelist NFT other transaction revert by error: `!whitelist`\",\"params\":{\"amount\":\"- amount USD+ for buy OVN\",\"tokenId\":\"- Whitelist NFT ID\",\"typeNft\":\"- NFT from Galxe(Service) or OVN Partners (Partner)\"}},\"finish()\":{\"details\":\"Finish PRE-SALE  Can execute by Owner in end pre sale  Can execute by user when call claimRefund\"},\"getCommitExcess()\":{\"details\":\"Claim excess USD+ after finished pre-sale excess USD+ appear due to rebase NOT AFFECT USERS BONUS\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"start()\":{\"details\":\"Run Pre Sale Execute only by Owner Owner should have amount \\\"totalSales\\\" on balance\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OverflowICO.sol\":\"OverflowICO\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/IWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWhitelist {\\n\\n    enum TypeNft{\\n        SERVICE,\\n        PARTNER\\n    }\\n\\n    function isWhitelist(\\n        address user,\\n        uint256[] calldata serviceIds,\\n        uint256[] calldata partnersIds) external view returns (bool[] memory serviceFlags, bool[] memory partnerFlags);\\n\\n    function verify(address user, uint256 tokenId, TypeNft typeNft) external;\\n}\\n\",\"keccak256\":\"0xfa1cc36afd7bb6f7ea598afa6f2f35eb8c3d9a4659d1d9c40f70fc33e5236ad4\",\"license\":\"MIT\"},\"contracts/OverflowICO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IWhitelist.sol\\\";\\n\\ncontract OverflowICO is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    enum UserPresaleState {\\n        WAITING_FOR_PRESALE_START,\\n        COMMIT,\\n        CLAIM_REFUND,\\n        WAITING_FOR_CLAIM_BONUS,\\n        CLAIM_BONUS,\\n        WAITING_FOR_CLAIM_SALES_FIRST_PART,\\n        CLAIM_SALES_FIRST_PART,\\n        WAITING_FOR_CLAIM_VESTING,\\n        CLAIM_VESTING,\\n        NOTHING_TO_DO\\n    }\\n\\n    struct SetUpParams {\\n        address commitToken;\\n        address salesToken;\\n        uint256 hardCap;\\n        uint256 softCap;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 claimBonusTime;\\n        uint256 claimSalesFirstPartTime;\\n        uint256 vestingBeginTime;\\n        uint256 vestingDuration;\\n        uint256 vestingProportion;\\n        uint256 minCommit;\\n        uint256 maxCommit;\\n        uint256 totalSales;\\n        address whitelist;\\n    }\\n\\n    struct UserInfo {\\n        uint256 userCommitments;  // How much total user commit in USD+\\n        uint256 salesToReceive;   // How much user to get OVN in future (dynamic changed by overflow) (decrease when user claim OVN)\\n        uint256 commitToReceive;  // How much user to get bonus from USD+ (dynamic from rebase USD+)\\n        uint256 commitToRefund;   // How much user to get USD+ if total_commit > hard cap\\n        uint256 lockedSales;      // How much user has locked OVN (decrease when user claim OVN)\\n        uint256 unlockedSales;    // How much user available for claim OVN (decrease to zero when user claim OVN) (unlock by vesting time)\\n    }\\n\\n    IERC20 public immutable commitToken; // USD+ token\\n    IERC20 public immutable salesToken;  // OVN token\\n    uint256 public immutable hardCap;\\n    uint256 public immutable softCap;\\n    uint256 public immutable totalSales;\\n    uint256 public immutable vestingProportion;\\n    uint256 public immutable salesPerCommit;\\n    uint256 public immutable commitDm;\\n\\n    uint256 public immutable startTime;\\n    uint256 public immutable endTime;\\n    uint256 public immutable claimBonusTime;\\n    uint256 public immutable claimSalesFirstPartTime;\\n    uint256 public immutable vestingBeginTime;\\n    uint256 public immutable vestingDuration;\\n\\n    uint256 public immutable minCommit;\\n    uint256 public immutable maxCommit;\\n\\n    bool public started;\\n    bool public finished;\\n\\n    uint256 public totalCommitments;\\n    uint256 public totalShares;\\n    uint256 public totalCommitToBonus;\\n    uint256 public commitTakenAway;\\n    mapping(address => uint256) public commitments;\\n    mapping(address => uint256) public shares;\\n    mapping(address => uint256) public immutableCommitments;\\n    mapping(address => uint256) public finalSales;\\n    mapping(address => uint256) public finalCommit;\\n\\n    mapping(address => uint256) public claimableTotal;\\n    mapping(address => uint256) public claimed;\\n    mapping(address => bool) public registered;\\n\\n    IWhitelist public whitelist;\\n\\n    uint256 public constant VESTING_DISTRIBUTION_DM = 1e18;\\n\\n    event Commit(address indexed buyer, uint256 amount);\\n    event ClaimRefund(address indexed buyer, uint256 refund, uint256 sales, uint256 commit);\\n    event ClaimBonus(address indexed buyer, uint256 commit);\\n    event ClaimSalesFirstPart(address indexed buyer, uint256 sales);\\n    event ClaimVesting(address addr, uint256 amount);\\n\\n\\n    constructor(SetUpParams memory params) {\\n        require(params.startTime >= block.timestamp, \\\"Start time must be in the future\\\");\\n        require(params.endTime > params.startTime, \\\"End time must be greater than start time\\\");\\n        require(params.hardCap > 0, \\\"hardCap should be greater than 0\\\");\\n        require(params.hardCap > params.softCap, \\\"hardCap should be greater than softCap\\\");\\n        require(params.minCommit > 0, \\\"Minimum commitment should be greater than 0\\\");\\n        require(params.maxCommit >= params.minCommit, \\\"Maximum commitment should be greater or equal to minimum commitment\\\");\\n        require(params.claimBonusTime > params.endTime, \\\"claimBonusTime must be greater than endTime\\\");\\n        require(params.claimSalesFirstPartTime > params.claimBonusTime, \\\"claimSalesFirstPartTime must be greater than claimBonusTime\\\");\\n        require(params.vestingBeginTime > params.claimSalesFirstPartTime, \\\"vestingBeginTime must be greater than claimSalesFirstPartTime\\\");\\n\\n        commitToken = IERC20(params.commitToken);\\n        salesToken = IERC20(params.salesToken);\\n        hardCap = params.hardCap;\\n        softCap = params.softCap;\\n        startTime = params.startTime;\\n        endTime = params.endTime;\\n        claimBonusTime = params.claimBonusTime;\\n        claimSalesFirstPartTime = params.claimSalesFirstPartTime;\\n        vestingBeginTime = params.vestingBeginTime;\\n        vestingDuration = params.vestingDuration;\\n        minCommit = params.minCommit;\\n        maxCommit = params.maxCommit;\\n        totalSales = params.totalSales;\\n        vestingProportion = params.vestingProportion;\\n        commitDm = 10 ** IERC20Metadata(params.commitToken).decimals();\\n        salesPerCommit = params.totalSales * 10 ** IERC20Metadata(params.commitToken).decimals() / params.hardCap;\\n\\n        whitelist = IWhitelist(params.whitelist);\\n    }\\n\\n    /**\\n     * @dev Run Pre Sale\\n     * Execute only by Owner\\n     * Owner should have amount \\\"totalSales\\\" on balance\\n     */\\n\\n    function start() external onlyOwner {\\n        require(!started, \\\"Already started\\\");\\n        started = true;\\n        salesToken.safeTransferFrom(msg.sender, address(this), totalSales);\\n    }\\n\\n    /**\\n     * @dev Buy SalesTokens (OVN) for commitTokens (USD+)\\n     *\\n     * Execute only by User\\n     * User should to have Whitelist NFT other transaction revert by error: `!whitelist`\\n     * @param amount - amount USD+ for buy OVN\\n     * @param tokenId - Whitelist NFT ID\\n     * @param typeNft - NFT from Galxe(Service) or OVN Partners (Partner)\\n     */\\n\\n    function commit(uint256 amount, uint256 tokenId, IWhitelist.TypeNft typeNft) external payable nonReentrant {\\n        require(commitToken.balanceOf(msg.sender) >= amount, \\\"Insufficient user USD+ balance\\\");\\n        whitelist.verify(msg.sender, tokenId, typeNft);\\n\\n        require(\\n            started && block.timestamp >= startTime && block.timestamp < endTime,\\n            \\\"Can only deposit USD+ during the sale period\\\"\\n        );\\n        require(\\n            minCommit <= commitments[msg.sender] + amount && commitments[msg.sender] + amount <= maxCommit,\\n            \\\"Commitment amount is outside the allowed range\\\"\\n        );\\n\\n        require(getUserState(msg.sender) == UserPresaleState.COMMIT, \\\"Inappropriate user's state\\\");\\n\\n        commitToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        commitments[msg.sender] += amount;\\n        shares[msg.sender] += amount * (endTime - block.timestamp);\\n        totalShares += amount * (endTime - block.timestamp);\\n        immutableCommitments[msg.sender] += amount;\\n        totalCommitments += amount;\\n        emit Commit(msg.sender, amount);\\n    }\\n\\n   /**\\n     * @dev Claim extra USD+ if total_commit > hard_cap\\n     * Executing only after end pre-sale.\\n     *\\n     * Transfer extra USD+ to user.\\n     * Calculating also next params:\\n     * - finalSales (total OVN user should to get)\\n     * - finalCommit  (total rebase of USD+ user should to get)\\n     */\\n\\n    function claimRefund() external nonReentrant returns (uint256, uint256, uint256) {\\n        require(block.timestamp > endTime, \\\"Can only claim tokens after the sale has ended\\\");\\n        require(commitments[msg.sender] > 0, \\\"You have not deposited any USD+\\\");\\n        require(getUserState(msg.sender) == UserPresaleState.CLAIM_REFUND, \\\"Inappropriate user's state\\\");\\n\\n        if (!finished) {\\n            _finish();\\n        }\\n\\n        if (totalCommitments >= softCap) {\\n            uint256 commitToSpend = Math.min(commitments[msg.sender], (commitments[msg.sender] * hardCap) / totalCommitments);\\n            uint256 commitToRefund = commitments[msg.sender] - commitToSpend;\\n            uint256 commitToReceive = shares[msg.sender] * totalCommitToBonus / totalShares;\\n            uint256 salesToReceive = (commitToSpend * salesPerCommit) / commitDm;\\n\\n            commitments[msg.sender] = 0;\\n\\n            finalSales[msg.sender] = salesToReceive;\\n            finalCommit[msg.sender] = commitToReceive;\\n            commitTakenAway += commitToRefund;\\n            commitToken.safeTransfer(msg.sender, commitToRefund);\\n\\n            emit ClaimRefund(msg.sender, commitToRefund, salesToReceive, commitToReceive);\\n            return (commitToRefund, salesToReceive, commitToReceive);\\n        } else {\\n            uint256 userCommitments = commitments[msg.sender];\\n            commitments[msg.sender] = 0;\\n            commitTakenAway += userCommitments;\\n            commitToken.safeTransfer(msg.sender, userCommitments);\\n            emit ClaimRefund(msg.sender, userCommitments, 0, 0);\\n            return (userCommitments, 0, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Claim bonus (rebase) USD+\\n     * Executing only after \\\"claimRefund\\\"\\n     * Transfer bonus USD+ to user.\\n     */\\n\\n    function claimBonus() external nonReentrant {\\n        require(block.timestamp >= claimBonusTime, \\\"not bonus yet\\\");\\n        require(getUserState(msg.sender) == UserPresaleState.CLAIM_BONUS, \\\"Inappropriate user's state\\\");\\n\\n        uint256 userCommit = finalCommit[msg.sender];\\n        commitTakenAway += userCommit;\\n        require(userCommit != 0, \\\"not zero final values\\\");\\n        finalCommit[msg.sender] = 0;\\n\\n        commitToken.safeTransfer(msg.sender, userCommit);\\n        emit ClaimBonus(msg.sender, userCommit);\\n    }\\n\\n\\n    /**\\n     * @dev Claim 1 first part of OVN (25% depends from vestingProportion)\\n     * Executing only after \\\"claimBonus\\\"\\n     * Transfer OVN to user.\\n     */\\n\\n\\n    function claimSalesFirstPart() external nonReentrant {\\n        require(block.timestamp >= claimSalesFirstPartTime, \\\"not claimSalesFirstPart yet\\\");\\n        require(getUserState(msg.sender) == UserPresaleState.CLAIM_SALES_FIRST_PART, \\\"Inappropriate user's state\\\");\\n\\n        uint256 userSales = finalSales[msg.sender];\\n        require(userSales != 0, \\\"not zero final values\\\");\\n        finalSales[msg.sender] = 0;\\n\\n        uint256 vesting = userSales * vestingProportion / VESTING_DISTRIBUTION_DM;\\n        require(!registered[msg.sender], \\\"already registered\\\");\\n        claimableTotal[msg.sender] = vesting;\\n        registered[msg.sender] = true;\\n\\n        salesToken.safeTransfer(msg.sender, userSales - vesting);\\n\\n        emit ClaimSalesFirstPart(msg.sender, userSales);\\n    }\\n\\n\\n    /**\\n     * @dev Claim unlock OVN tokens by time (vesting)\\n     * Transfer OVN to user.\\n     */\\n\\n    function claimVesting(address addr) public nonReentrant returns (uint256) {\\n        require(registered[addr]);\\n        require(block.timestamp >= vestingBeginTime, \\\"not claimVesting yet\\\");\\n        require(getUserState(addr) == UserPresaleState.CLAIM_VESTING, \\\"Inappropriate user's state\\\");\\n\\n        uint256 vested = 0;\\n        if (block.timestamp >= vestingBeginTime + vestingDuration) {\\n            vested = claimableTotal[addr];\\n        } else {\\n            vested = Math.mulDiv(claimableTotal[addr], block.timestamp - vestingBeginTime, vestingDuration);\\n        }\\n\\n\\n        uint256 delta = vested - claimed[addr];\\n        claimed[addr] = vested;\\n\\n        salesToken.safeTransfer(addr, delta);\\n        emit ClaimVesting(addr, delta);\\n        return delta;\\n    }\\n\\n    function _finish() private {\\n        require(block.timestamp > endTime, \\\"Can only finish after the sale has ended\\\");\\n        require(!finished, \\\"Already finished\\\");\\n\\n        finished = true;\\n\\n        if (totalCommitments >= softCap) {\\n            uint256 usingCommitToken = Math.min(hardCap, totalCommitments);\\n            commitToken.safeTransfer(owner(), usingCommitToken);\\n            salesToken.safeTransfer(owner(), totalSales - (usingCommitToken * salesPerCommit) / commitDm);\\n        } else {\\n            commitToken.safeTransfer(owner(), commitToken.balanceOf(address(this)) - totalCommitments);\\n            salesToken.safeTransfer(owner(), totalSales);\\n        }\\n\\n        // How much USD+ rebase distribute to users\\n        totalCommitToBonus = commitToken.balanceOf(address(this));\\n\\n        // Decrease refund money from totalCommitToBonus\\n        if (totalCommitments >= hardCap) {\\n            totalCommitToBonus -= (totalCommitments - hardCap);\\n        }\\n\\n    }\\n\\n    /**\\n     * @dev Finish PRE-SALE\\n     *  Can execute by Owner in end pre sale\\n     *  Can execute by user when call claimRefund\\n     */\\n\\n    function finish() public onlyOwner {\\n        _finish();\\n    }\\n\\n\\n    /**\\n     * @dev Claim excess USD+ after finished pre-sale\\n     * excess USD+ appear due to rebase\\n     * NOT AFFECT USERS BONUS\\n     */\\n\\n    function getCommitExcess() public onlyOwner {\\n        require(finished, \\\"Not finished yet\\\");\\n        uint256 remainingRefundOrBonus = totalCommitToBonus;\\n        if (totalCommitments >= hardCap) {\\n            remainingRefundOrBonus += (totalCommitments - hardCap);\\n        }\\n        remainingRefundOrBonus -= commitTakenAway;\\n        uint256 commitToOwner = commitToken.balanceOf(address(this)) - remainingRefundOrBonus;\\n        commitToken.safeTransfer(owner(), commitToOwner);\\n    }\\n\\n    function getUserState(address user) public view returns (UserPresaleState) {\\n        if (!started || block.timestamp < startTime) {\\n            return UserPresaleState.WAITING_FOR_PRESALE_START;\\n        }\\n\\n        if (block.timestamp >= startTime && block.timestamp < endTime) {\\n            return UserPresaleState.COMMIT;\\n        }\\n\\n        if (block.timestamp >= endTime && commitments[user] > 0) {\\n            return UserPresaleState.CLAIM_REFUND;\\n        }\\n\\n        if (block.timestamp >= endTime && block.timestamp < claimBonusTime && commitments[user] == 0 && finalSales[user] != 0) {\\n            return UserPresaleState.WAITING_FOR_CLAIM_BONUS;\\n        }\\n\\n        if (block.timestamp >= claimBonusTime && finalCommit[user] != 0) {\\n            return UserPresaleState.CLAIM_BONUS;\\n        }\\n\\n        if (block.timestamp >= claimBonusTime && block.timestamp < claimSalesFirstPartTime && finalCommit[user] == 0 && finalSales[user] != 0) {\\n            return UserPresaleState.WAITING_FOR_CLAIM_SALES_FIRST_PART;\\n        }\\n\\n        if (block.timestamp >= claimSalesFirstPartTime && finalSales[user] != 0) {\\n            return UserPresaleState.CLAIM_SALES_FIRST_PART;\\n        }\\n\\n        if (block.timestamp >= claimSalesFirstPartTime && block.timestamp < vestingBeginTime && registered[user]) {\\n            return UserPresaleState.WAITING_FOR_CLAIM_VESTING;\\n        }\\n\\n        if (block.timestamp > vestingBeginTime && registered[user] && claimableTotal[user] != claimed[user]) {\\n            return UserPresaleState.CLAIM_VESTING;\\n        }\\n\\n        return UserPresaleState.NOTHING_TO_DO;\\n    }\\n\\n    function getUserInfo(address user) external view returns (UserInfo memory userInfo) {\\n\\n        UserPresaleState userState = getUserState(user);\\n\\n        if (userState == UserPresaleState.WAITING_FOR_PRESALE_START) {\\n            return UserInfo(0, 0, 0, 0, 0, 0);\\n        }\\n\\n        if (userState == UserPresaleState.COMMIT || userState == UserPresaleState.CLAIM_REFUND) {\\n            if (commitments[user] == 0) {\\n                return UserInfo(0, 0, 0, 0, 0, 0);\\n            } else {\\n                if (totalCommitments >= softCap) {\\n                    uint256 commitToSpend = Math.min(commitments[user], (commitments[user] * hardCap) / totalCommitments);\\n                    uint256 commitToRefund = commitments[user] - commitToSpend;\\n                    uint256 commitToBonus = !finished ? (commitToken.balanceOf(address(this)) - totalCommitments) : totalCommitToBonus;\\n                    uint256 commitToReceive = shares[user] * commitToBonus / totalShares;\\n                    uint256 salesToReceive = (commitToSpend * salesPerCommit) / commitDm;\\n\\n                    return UserInfo(\\n                        commitments[user],\\n                        salesToReceive,\\n                        commitToReceive,\\n                        commitToRefund,\\n                        salesToReceive,\\n                        0\\n                    );\\n                } else {\\n                    return UserInfo(commitments[user], 0, 0, commitments[user], 0, 0);\\n                }\\n            }\\n        }\\n\\n        if (userState == UserPresaleState.WAITING_FOR_CLAIM_BONUS || userState == UserPresaleState.CLAIM_BONUS) {\\n            return UserInfo(\\n                immutableCommitments[user],\\n                finalSales[user],\\n                finalCommit[user],\\n                0,\\n                finalSales[user],\\n                0\\n            );\\n        }\\n\\n        if (userState == UserPresaleState.WAITING_FOR_CLAIM_SALES_FIRST_PART) {\\n            return UserInfo(\\n                immutableCommitments[user],\\n                finalSales[user],\\n                0,\\n                0,\\n                finalSales[user],\\n                0\\n            );\\n        }\\n\\n        if (userState == UserPresaleState.CLAIM_SALES_FIRST_PART) {\\n            uint256 vesting = finalSales[user] * vestingProportion / VESTING_DISTRIBUTION_DM;\\n            return UserInfo(\\n                immutableCommitments[user],\\n                finalSales[user],\\n                0,\\n                0,\\n                vesting,\\n                finalSales[user] - vesting\\n            );\\n        }\\n\\n        if (userState == UserPresaleState.WAITING_FOR_CLAIM_VESTING) {\\n            return UserInfo(\\n                immutableCommitments[user],\\n                claimableTotal[user],\\n                0,\\n                0,\\n                claimableTotal[user],\\n                0\\n            );\\n        }\\n\\n        if (userState == UserPresaleState.CLAIM_VESTING) {\\n            uint256 vested;\\n            if (block.timestamp >= vestingBeginTime + vestingDuration) {\\n                vested = claimableTotal[user];\\n            } else {\\n                vested = Math.mulDiv(claimableTotal[user], block.timestamp - vestingBeginTime, vestingDuration);\\n            }\\n            uint256 delta = vested - claimed[user];\\n            return UserInfo(\\n                immutableCommitments[user],\\n                claimableTotal[user] - claimed[user],\\n                0,\\n                0,\\n                claimableTotal[user] - claimed[user] - delta,\\n                delta\\n            );\\n        }\\n\\n        if (userState == UserPresaleState.NOTHING_TO_DO) {\\n            return UserInfo(immutableCommitments[user], 0, 0, 0, 0, 0);\\n        }\\n\\n    }\\n\\n}\\n\",\"keccak256\":\"0xbfc0302eee02d4a472cb51d12aa4f6911dabaf619078e44a8cd8b29c5b2f4f87\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6102806040523480156200001257600080fd5b5060405162003ed238038062003ed283398101604081905262000035916200069c565b6200004033620005f7565b6001805560808101514211156200009e5760405162461bcd60e51b815260206004820181905260248201527f53746172742074696d65206d75737420626520696e207468652066757475726560448201526064015b60405180910390fd5b80608001518160a0015111620001085760405162461bcd60e51b815260206004820152602860248201527f456e642074696d65206d7573742062652067726561746572207468616e2073746044820152676172742074696d6560c01b606482015260840162000095565b60008160400151116200015e5760405162461bcd60e51b815260206004820181905260248201527f686172644361702073686f756c642062652067726561746572207468616e2030604482015260640162000095565b8060600151816040015111620001c65760405162461bcd60e51b815260206004820152602660248201527f686172644361702073686f756c642062652067726561746572207468616e207360448201526506f66744361760d41b606482015260840162000095565b600081610160015111620002315760405162461bcd60e51b815260206004820152602b60248201527f4d696e696d756d20636f6d6d69746d656e742073686f756c642062652067726560448201526a061746572207468616e20360ac1b606482015260840162000095565b8061016001518161018001511015620002bf5760405162461bcd60e51b815260206004820152604360248201527f4d6178696d756d20636f6d6d69746d656e742073686f756c642062652067726560448201527f61746572206f7220657175616c20746f206d696e696d756d20636f6d6d69746d606482015262195b9d60ea1b608482015260a40162000095565b8060a001518160c00151116200032c5760405162461bcd60e51b815260206004820152602b60248201527f636c61696d426f6e757354696d65206d7573742062652067726561746572207460448201526a68616e20656e6454696d6560a81b606482015260840162000095565b8060c001518160e0015111620003ab5760405162461bcd60e51b815260206004820152603b60248201527f636c61696d53616c657346697273745061727454696d65206d7573742062652060448201527f67726561746572207468616e20636c61696d426f6e757354696d650000000000606482015260840162000095565b8060e00151816101000151116200042b5760405162461bcd60e51b815260206004820152603d60248201527f76657374696e67426567696e54696d65206d757374206265206772656174657260448201527f207468616e20636c61696d53616c657346697273745061727454696d65000000606482015260840162000095565b80516001600160a01b039081166080908152602080840151831660a090815260408086015160c0908152606087015160e090815294870151610180908152928701516101a0908152908701516101c052938601516101e052610100808701516102005261012080880151610220526101608801516102405292870151610260529386015190935261014085015190528351825163313ce56760e01b8152925193169263313ce5679260048082019392918290030181865afa158015620004f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200051b919062000779565b6200052890600a620008ba565b6101608181525050806040015181600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000578573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200059e919062000779565b620005ab90600a620008ba565b826101a00151620005bd9190620008cb565b620005c99190620008e5565b610140526101c00151600f80546001600160a01b0319166001600160a01b0390921691909117905562000908565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516101e081016001600160401b03811182821017156200067957634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200069757600080fd5b919050565b60006101e08284031215620006b057600080fd5b620006ba62000647565b620006c5836200067f565b8152620006d5602084016200067f565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152506101608084015181830152506101808084015181830152506101a08084015181830152506101c06200076e8185016200067f565b908201529392505050565b6000602082840312156200078c57600080fd5b815160ff811681146200079e57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620007fc578160001904821115620007e057620007e0620007a5565b80851615620007ee57918102915b93841c9390800290620007c0565b509250929050565b6000826200081557506001620008b4565b816200082457506000620008b4565b81600181146200083d5760028114620008485762000868565b6001915050620008b4565b60ff8411156200085c576200085c620007a5565b50506001821b620008b4565b5060208310610133831016604e8410600b84101617156200088d575081810a620008b4565b620008998383620007bb565b8060001904821115620008b057620008b0620007a5565b0290505b92915050565b60006200079e60ff84168362000804565b8082028115828204841417620008b457620008b4620007a5565b6000826200090357634e487b7160e01b600052601260045260246000fd5b500490565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161333762000b9b600039600081816104670152611e260152600081816103590152611dec0152600081816102e501528181610ea501528181610f5801526119d001526000818161096101528181610cec01528181610d4101528181610dfb01528181610ec601528181610f31015281816119f10152611a5c01526000818161092d01528181610bf701528181610c6d01528181610cc1015261250f01526000818161085501528181610b0201528181610b7801528181610bcc015261104b01526000818161038d01528181610a5201528181610a8301528181610ad701528181611d4c01528181611f5001528181611fa90152818161207c0152612a4901526000818161063f015281816109f601528181610a270152611d2001526000818161078c015281816116480152818161226a0152612ba60152600081816104f40152818161166c0152818161228e0152612bca0152600081816107f40152818161189b015261262e015260008181610594015281816124d101528181612bff0152612d460152600081816106d8015281816114b1015281816121ae0152612b260152600081816109c20152818161123301528181611259015281816114fe015281816121f201528181612b5101528181612dfa0152612e200152600081816105dd01528181610fc7015281816124ad015281816126f40152612d2301526000818161067301528181611169015281816112c40152818161135a0152818161159001528181611be901528181611efd01528181612310015281816123c401528181612c5601528181612cdd0152612d7f01526133376000f3fe6080604052600436106102725760003560e01c806378e979251161014f578063c530b64e116100c1578063e8fcf7231161007a578063e8fcf723146108ce578063f2fde38b146108fb578063f51bcc171461091b578063faab58db1461094f578063fb27efb414610983578063fb86a404146109b057600080fd5b8063c530b64e146107e2578063c884ef8314610816578063cc9916b214610843578063ce7c2ac214610877578063d56b2889146108a4578063d798f792146108b957600080fd5b806393e59dc11161011357806393e59dc1146106fa578063b2dd5c071461071a578063b5545a3c1461074a578063bb3fdf7e1461077a578063be9a6555146107ae578063bef4876b146107c357600080fd5b806378e979251461062d5780637c9e1e5714610661578063868fdbea146106955780638da5cb5b146106a8578063906a26e0146106c657600080fd5b806345a20af0116101e857806360153415116101ac57806360153415146104e25780636386c1c7146105165780636605ff6614610582578063715018a6146105b657806372da776e146105cb57806378bb86d31461061757600080fd5b806345a20af014610435578063483383c8146104555780634c5fb3511461048957806350635394146104b6578063549cc321146104cd57600080fd5b80632bcbf7cd1161023a5780632bcbf7cd146103475780633197cbb61461037b5780633a98ef39146103af5780633b8c84d0146103c5578063416ae768146103f2578063458389bd1461041f57600080fd5b80630c0332d0146102775780631188a5f9146102b75780631514617e146102d35780631f2698ab1461030757806323ef4a2d14610331575b600080fd5b34801561028357600080fd5b506102a46102923660046130c6565b600a6020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156102c357600080fd5b506102a4670de0b6b3a764000081565b3480156102df57600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561031357600080fd5b506002546103219060ff1681565b60405190151581526020016102ae565b34801561033d57600080fd5b506102a460055481565b34801561035357600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561038757600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b3480156103bb57600080fd5b506102a460045481565b3480156103d157600080fd5b506102a46103e03660046130c6565b600b6020526000908152604090205481565b3480156103fe57600080fd5b5061041261040d3660046130c6565b6109e4565b6040516102ae9190613105565b34801561042b57600080fd5b506102a460065481565b34801561044157600080fd5b506102a46104503660046130c6565b610dca565b34801561046157600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561049557600080fd5b506102a46104a43660046130c6565b60096020526000908152604090205481565b3480156104c257600080fd5b506104cb611041565b005b3480156104d957600080fd5b506104cb6111d9565b3480156104ee57600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561052257600080fd5b506105366105313660046130c6565b611385565b6040516102ae9190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b34801561058e57600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b3480156105c257600080fd5b506104cb611bb8565b3480156105d757600080fd5b506105ff7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102ae565b34801561062357600080fd5b506102a460035481565b34801561063957600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561066d57600080fd5b506105ff7f000000000000000000000000000000000000000000000000000000000000000081565b6104cb6106a336600461311f565b611bca565b3480156106b457600080fd5b506000546001600160a01b03166105ff565b3480156106d257600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561070657600080fd5b50600f546105ff906001600160a01b031681565b34801561072657600080fd5b506103216107353660046130c6565b600e6020526000908152604090205460ff1681565b34801561075657600080fd5b5061075f61206d565b604080519384526020840192909252908201526060016102ae565b34801561078657600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b3480156107ba57600080fd5b506104cb612446565b3480156107cf57600080fd5b5060025461032190610100900460ff1681565b3480156107ee57600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561082257600080fd5b506102a46108313660046130c6565b600d6020526000908152604090205481565b34801561084f57600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561088357600080fd5b506102a46108923660046130c6565b60086020526000908152604090205481565b3480156108b057600080fd5b506104cb6124f5565b3480156108c557600080fd5b506104cb612505565b3480156108da57600080fd5b506102a46108e93660046130c6565b60076020526000908152604090205481565b34801561090757600080fd5b506104cb6109163660046130c6565b61275b565b34801561092757600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561095b57600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561098f57600080fd5b506102a461099e3660046130c6565b600c6020526000908152604090205481565b3480156109bc57600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b60025460009060ff161580610a1857507f000000000000000000000000000000000000000000000000000000000000000042105b15610a2557506000919050565b7f00000000000000000000000000000000000000000000000000000000000000004210158015610a7457507f000000000000000000000000000000000000000000000000000000000000000042105b15610a8157506001919050565b7f00000000000000000000000000000000000000000000000000000000000000004210158015610ac857506001600160a01b03821660009081526007602052604090205415155b15610ad557506002919050565b7f00000000000000000000000000000000000000000000000000000000000000004210158015610b2457507f000000000000000000000000000000000000000000000000000000000000000042105b8015610b4657506001600160a01b038216600090815260076020526040902054155b8015610b6957506001600160a01b0382166000908152600a602052604090205415155b15610b7657506003919050565b7f00000000000000000000000000000000000000000000000000000000000000004210158015610bbd57506001600160a01b0382166000908152600b602052604090205415155b15610bca57506004919050565b7f00000000000000000000000000000000000000000000000000000000000000004210158015610c1957507f000000000000000000000000000000000000000000000000000000000000000042105b8015610c3b57506001600160a01b0382166000908152600b6020526040902054155b8015610c5e57506001600160a01b0382166000908152600a602052604090205415155b15610c6b57506005919050565b7f00000000000000000000000000000000000000000000000000000000000000004210158015610cb257506001600160a01b0382166000908152600a602052604090205415155b15610cbf57506006919050565b7f00000000000000000000000000000000000000000000000000000000000000004210158015610d0e57507f000000000000000000000000000000000000000000000000000000000000000042105b8015610d3257506001600160a01b0382166000908152600e602052604090205460ff165b15610d3f57506007919050565b7f000000000000000000000000000000000000000000000000000000000000000042118015610d8657506001600160a01b0382166000908152600e602052604090205460ff165b8015610db557506001600160a01b0382166000908152600d6020908152604080832054600c9092529091205414155b15610dc257506008919050565b506009919050565b6000610dd46127d4565b6001600160a01b0382166000908152600e602052604090205460ff16610df957600080fd5b7f0000000000000000000000000000000000000000000000000000000000000000421015610e655760405162461bcd60e51b81526020600482015260146024820152731b9bdd0818db185a5b55995cdd1a5b99c81e595d60621b60448201526064015b60405180910390fd5b6008610e70836109e4565b6009811115610e8157610e816130ef565b14610e9e5760405162461bcd60e51b8152600401610e5c9061315c565b6000610eea7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006131a9565b4210610f0f57506001600160a01b0382166000908152600c6020526040902054610f7f565b6001600160a01b0383166000908152600c6020526040902054610f7c90610f567f0000000000000000000000000000000000000000000000000000000000000000426131bc565b7f000000000000000000000000000000000000000000000000000000000000000061282d565b90505b6001600160a01b0383166000908152600d6020526040812054610fa290836131bc565b6001600160a01b038086166000908152600d60205260409020849055909150610fee907f00000000000000000000000000000000000000000000000000000000000000001685836128e2565b604080516001600160a01b0386168152602081018390527ffbed6a2445b2fb12101a9cd62317dad46e867f7cc92f27c85f5427ad972491d2910160405180910390a191505061103c60018055565b919050565b6110496127d4565b7f00000000000000000000000000000000000000000000000000000000000000004210156110a95760405162461bcd60e51b815260206004820152600d60248201526c1b9bdd08189bdb9d5cc81e595d609a1b6044820152606401610e5c565b60046110b4336109e4565b60098111156110c5576110c56130ef565b146110e25760405162461bcd60e51b8152600401610e5c9061315c565b336000908152600b602052604081205460068054919283926111059084906131a9565b909155505060008190036111535760405162461bcd60e51b81526020600482015260156024820152746e6f74207a65726f2066696e616c2076616c75657360581b6044820152606401610e5c565b336000818152600b6020526040812055611198907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690836128e2565b60405181815233907f49b737950c44e6ab2219a0bfd40fbfa3112502435d424e3c1e00a1c4e0d2603d9060200160405180910390a2506111d760018055565b565b6111e1612945565b600254610100900460ff1661122b5760405162461bcd60e51b815260206004820152601060248201526f139bdd08199a5b9a5cda1959081e595d60821b6044820152606401610e5c565b6005546003547f000000000000000000000000000000000000000000000000000000000000000011611292577f000000000000000000000000000000000000000000000000000000000000000060035461128591906131bc565b61128f90826131a9565b90505b60065461129f90826131bc565b6040516370a0823160e01b815230600482015290915060009082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561130b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132f91906131cf565b61133991906131bc565b90506113816113506000546001600160a01b031690565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690836128e2565b5050565b6113be6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006113c9836109e4565b905060008160098111156113df576113df6130ef565b0361141f576040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815250915050919050565b6001816009811115611433576114336130ef565b14806114505750600281600981111561144e5761144e6130ef565b145b15611740576001600160a01b03831660009081526007602052604081205490036114af576040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815250915050919050565b7f0000000000000000000000000000000000000000000000000000000000000000600354106116ed576001600160a01b03831660009081526007602052604081205460035461153291906115237f0000000000000000000000000000000000000000000000000000000000000000836131e8565b61152d9190613215565b61299f565b6001600160a01b0385166000908152600760205260408120549192509061155a9083906131bc565b600254909150600090610100900460ff16156115785760055461160d565b6003546040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156115df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160391906131cf565b61160d91906131bc565b6004546001600160a01b038816600090815260086020526040812054929350916116389084906131e8565b6116429190613215565b905060007f00000000000000000000000000000000000000000000000000000000000000006116917f0000000000000000000000000000000000000000000000000000000000000000876131e8565b61169b9190613215565b6040805160c0810182526001600160a01b03909a16600090815260076020908152828220548c528b01839052908a019390935260608901949094525060808701929092525060a0850152509192915050565b50506040805160c0810182526001600160a01b039092166000818152600760208181528483205480875281870184905294860183905292825290915260608301919091526080820181905260a082015290565b6003816009811115611754576117546130ef565b14806117715750600481600981111561176f5761176f6130ef565b145b156117e15750506040805160c0810182526001600160a01b03909216600081815260096020908152838220548552828252600a80825284832054828701819052848452600b835285842054958701959095526060860183905292825291909152608083019190915260a082015290565b60058160098111156117f5576117f56130ef565b036118595750506040805160c0810182526001600160a01b03909216600081815260096020908152838220548552828252600a808252848320548287018190529486018390526060860183905292825291909152608083019190915260a082015290565b600681600981111561186d5761186d6130ef565b03611938576001600160a01b0383166000908152600a6020526040812054670de0b6b3a7640000906118c0907f0000000000000000000000000000000000000000000000000000000000000000906131e8565b6118ca9190613215565b6040805160c0810182526001600160a01b038716600081815260096020908152848220548452828252600a808252858320548286018190529585018390526060850183905260808501879052929091525291925060a082019061192e9084906131bc565b9052949350505050565b600781600981111561194c5761194c6130ef565b036119b05750506040805160c0810182526001600160a01b03909216600081815260096020908152838220548552828252600c808252848320548287018190529486018390526060860183905292825291909152608083019190915260a082015290565b60088160098111156119c4576119c46130ef565b03611b4f576000611a157f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006131a9565b4210611a3a57506001600160a01b0383166000908152600c6020526040902054611a84565b6001600160a01b0384166000908152600c6020526040902054611a8190610f567f0000000000000000000000000000000000000000000000000000000000000000426131bc565b90505b6001600160a01b0384166000908152600d6020526040812054611aa790836131bc565b6040805160c0810182526001600160a01b038816600081815260096020908152848220548452918152600d825283812054600c835293902054939450909290830191611af2916131bc565b81526000602080830182905260408084018390526001600160a01b038a168352600d825280832054600c909252909120546060909201918491611b34916131bc565b611b3e91906131bc565b815260200191909152949350505050565b6009816009811115611b6357611b636130ef565b03611bb25750506040805160c0810182526001600160a01b039092166000908152600960209081528282205484528301819052908201819052606082018190526080820181905260a082015290565b50919050565b611bc0612945565b6111d760006129b9565b611bd26127d4565b6040516370a0823160e01b815233600482015283907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5c91906131cf565b1015611caa5760405162461bcd60e51b815260206004820152601e60248201527f496e73756666696369656e742075736572205553442b2062616c616e636500006044820152606401610e5c565b600f546040516306253ecb60e21b81526001600160a01b0390911690631894fb2c90611cde90339086908690600401613237565b600060405180830381600087803b158015611cf857600080fd5b505af1158015611d0c573d6000803e3d6000fd5b505060025460ff169150508015611d4357507f00000000000000000000000000000000000000000000000000000000000000004210155b8015611d6e57507f000000000000000000000000000000000000000000000000000000000000000042105b611dcf5760405162461bcd60e51b815260206004820152602c60248201527f43616e206f6e6c79206465706f736974205553442b20647572696e672074686560448201526b081cd85b19481c195c9a5bd960a21b6064820152608401610e5c565b33600090815260076020526040902054611dea9084906131a9565b7f000000000000000000000000000000000000000000000000000000000000000011158015611e545750336000908152600760205260409020547f000000000000000000000000000000000000000000000000000000000000000090611e519085906131a9565b11155b611eb75760405162461bcd60e51b815260206004820152602e60248201527f436f6d6d69746d656e7420616d6f756e74206973206f7574736964652074686560448201526d20616c6c6f7765642072616e676560901b6064820152608401610e5c565b6001611ec2336109e4565b6009811115611ed357611ed36130ef565b14611ef05760405162461bcd60e51b8152600401610e5c9061315c565b611f256001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612a09565b3360009081526007602052604081208054859290611f449084906131a9565b90915550611f749050427f00000000000000000000000000000000000000000000000000000000000000006131bc565b611f7e90846131e8565b3360009081526008602052604081208054909190611f9d9084906131a9565b90915550611fcd9050427f00000000000000000000000000000000000000000000000000000000000000006131bc565b611fd790846131e8565b60046000828254611fe891906131a9565b9091555050336000908152600960205260408120805485929061200c9084906131a9565b92505081905550826003600082825461202591906131a9565b909155505060405183815233907f5e1dd8c4451717d5ca4ffbefdada35e22e0871220b9ed9dd03a351f0938c5ed79060200160405180910390a261206860018055565b505050565b600080600061207a6127d4565b7f000000000000000000000000000000000000000000000000000000000000000042116121005760405162461bcd60e51b815260206004820152602e60248201527f43616e206f6e6c7920636c61696d20746f6b656e73206166746572207468652060448201526d1cd85b19481a185cc8195b99195960921b6064820152608401610e5c565b3360009081526007602052604090205461215c5760405162461bcd60e51b815260206004820152601f60248201527f596f752068617665206e6f74206465706f736974656420616e79205553442b006044820152606401610e5c565b6002612167336109e4565b6009811115612178576121786130ef565b146121955760405162461bcd60e51b8152600401610e5c9061315c565b600254610100900460ff166121ac576121ac612a47565b7f000000000000000000000000000000000000000000000000000000000000000060035410612389573360009081526007602052604081205460035461221791906115237f0000000000000000000000000000000000000000000000000000000000000000836131e8565b33600090815260076020526040812054919250906122369083906131bc565b600454600554336000908152600860205260408120549394509261225a91906131e8565b6122649190613215565b905060007f00000000000000000000000000000000000000000000000000000000000000006122b37f0000000000000000000000000000000000000000000000000000000000000000866131e8565b6122bd9190613215565b336000908152600760209081526040808320839055600a8252808320849055600b90915281208490556006805492935085929091906122fd9084906131a9565b9091555061233790506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633856128e2565b604080518481526020810183905290810183905233907fe25dbc2a67a76c6b285465c3a09eb9c20d692944629a166922fbfee37d9ae7a29060600160405180910390a291955090935091506124389050565b33600090815260076020526040812080549082905560068054919283926123b19084906131a9565b909155506123eb90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836128e2565b6040805182815260006020820181905281830152905133917fe25dbc2a67a76c6b285465c3a09eb9c20d692944629a166922fbfee37d9ae7a2919081900360600190a29250600091508190505b61244160018055565b909192565b61244e612945565b60025460ff16156124935760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481cdd185c9d1959608a1b6044820152606401610e5c565b6002805460ff191660011790556111d76001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633307f0000000000000000000000000000000000000000000000000000000000000000612a09565b6124fd612945565b6111d7612a47565b61250d6127d4565b7f000000000000000000000000000000000000000000000000000000000000000042101561257d5760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420636c61696d53616c65734669727374506172742079657400000000006044820152606401610e5c565b6006612588336109e4565b6009811115612599576125996130ef565b146125b65760405162461bcd60e51b8152600401610e5c9061315c565b336000908152600a60205260408120549081900361260e5760405162461bcd60e51b81526020600482015260156024820152746e6f74207a65726f2066696e616c2076616c75657360581b6044820152606401610e5c565b336000908152600a60205260408120819055670de0b6b3a76400006126537f0000000000000000000000000000000000000000000000000000000000000000846131e8565b61265d9190613215565b336000908152600e602052604090205490915060ff16156126b55760405162461bcd60e51b8152602060048201526012602482015271185b1c9958591e481c9959da5cdd195c995960721b6044820152606401610e5c565b336000818152600c60209081526040808320859055600e9091529020805460ff1916600117905561271b906126ea83856131bc565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906128e2565b60405182815233907f39631b2f316cc07f5be357d18aabbb5a2826625a1c6a9799d741312934fce8d09060200160405180910390a250506111d760018055565b612763612945565b6001600160a01b0381166127c85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610e5c565b6127d1816129b9565b50565b6002600154036128265760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610e5c565b6002600155565b60008080600019858709858702925082811083820303915050806000036128675783828161285d5761285d6131ff565b04925050506128db565b80841161287357600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b6040516001600160a01b03831660248201526044810182905261206890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612e64565b6000546001600160a01b031633146111d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610e5c565b60008183106129ae57816129b0565b825b90505b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052612a419085906323b872dd60e01b9060840161290e565b50505050565b7f00000000000000000000000000000000000000000000000000000000000000004211612ac75760405162461bcd60e51b815260206004820152602860248201527f43616e206f6e6c792066696e697368206166746572207468652073616c652068604482015267185cc8195b99195960c21b6064820152608401610e5c565b600254610100900460ff1615612b125760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48199a5b9a5cda195960821b6044820152606401610e5c565b6002805461ff0019166101001790556003547f000000000000000000000000000000000000000000000000000000000000000011612c29576000612b787f000000000000000000000000000000000000000000000000000000000000000060035461299f565b9050612b8f6113506000546001600160a01b031690565b612c23612ba46000546001600160a01b031690565b7f0000000000000000000000000000000000000000000000000000000000000000612bef7f0000000000000000000000000000000000000000000000000000000000000000856131e8565b612bf99190613215565b6126ea907f00000000000000000000000000000000000000000000000000000000000000006131bc565b50612d6a565b612d04612c3e6000546001600160a01b031690565b6003546040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc991906131cf565b612cd391906131bc565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906128e2565b612d6a612d196000546001600160a01b031690565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907f00000000000000000000000000000000000000000000000000000000000000006128e2565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df291906131cf565b6005556003547f0000000000000000000000000000000000000000000000000000000000000000116111d7577f0000000000000000000000000000000000000000000000000000000000000000600354612e4c91906131bc565b60056000828254612e5d91906131bc565b9091555050565b6000612eb9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f369092919063ffffffff16565b8051909150156120685780806020019051810190612ed7919061326c565b6120685760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610e5c565b6060612f458484600085612f4d565b949350505050565b606082471015612fae5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610e5c565b600080866001600160a01b03168587604051612fca91906132b2565b60006040518083038185875af1925050503d8060008114613007576040519150601f19603f3d011682016040523d82523d6000602084013e61300c565b606091505b509150915061301d87838387613028565b979650505050505050565b60608315613097578251600003613090576001600160a01b0385163b6130905760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e5c565b5081612f45565b612f4583838151156130ac5781518083602001fd5b8060405162461bcd60e51b8152600401610e5c91906132ce565b6000602082840312156130d857600080fd5b81356001600160a01b03811681146128db57600080fd5b634e487b7160e01b600052602160045260246000fd5b60208101600a8310613119576131196130ef565b91905290565b60008060006060848603121561313457600080fd5b833592506020840135915060408401356002811061315157600080fd5b809150509250925092565b6020808252601a908201527f496e617070726f70726961746520757365722773207374617465000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156129b3576129b3613193565b818103818111156129b3576129b3613193565b6000602082840312156131e157600080fd5b5051919050565b80820281158282048414176129b3576129b3613193565b634e487b7160e01b600052601260045260246000fd5b60008261323257634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b038416815260208101839052606081016002831061325e5761325e6130ef565b826040830152949350505050565b60006020828403121561327e57600080fd5b815180151581146128db57600080fd5b60005b838110156132a9578181015183820152602001613291565b50506000910152565b600082516132c481846020870161328e565b9190910192915050565b60208152600082518060208401526132ed81604085016020870161328e565b601f01601f1916919091016040019291505056fea26469706673582212206c81d8599cfefd4da790ed81931944bbc69feb347c56b65d2c0258f8b2fb866a64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102725760003560e01c806378e979251161014f578063c530b64e116100c1578063e8fcf7231161007a578063e8fcf723146108ce578063f2fde38b146108fb578063f51bcc171461091b578063faab58db1461094f578063fb27efb414610983578063fb86a404146109b057600080fd5b8063c530b64e146107e2578063c884ef8314610816578063cc9916b214610843578063ce7c2ac214610877578063d56b2889146108a4578063d798f792146108b957600080fd5b806393e59dc11161011357806393e59dc1146106fa578063b2dd5c071461071a578063b5545a3c1461074a578063bb3fdf7e1461077a578063be9a6555146107ae578063bef4876b146107c357600080fd5b806378e979251461062d5780637c9e1e5714610661578063868fdbea146106955780638da5cb5b146106a8578063906a26e0146106c657600080fd5b806345a20af0116101e857806360153415116101ac57806360153415146104e25780636386c1c7146105165780636605ff6614610582578063715018a6146105b657806372da776e146105cb57806378bb86d31461061757600080fd5b806345a20af014610435578063483383c8146104555780634c5fb3511461048957806350635394146104b6578063549cc321146104cd57600080fd5b80632bcbf7cd1161023a5780632bcbf7cd146103475780633197cbb61461037b5780633a98ef39146103af5780633b8c84d0146103c5578063416ae768146103f2578063458389bd1461041f57600080fd5b80630c0332d0146102775780631188a5f9146102b75780631514617e146102d35780631f2698ab1461030757806323ef4a2d14610331575b600080fd5b34801561028357600080fd5b506102a46102923660046130c6565b600a6020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156102c357600080fd5b506102a4670de0b6b3a764000081565b3480156102df57600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561031357600080fd5b506002546103219060ff1681565b60405190151581526020016102ae565b34801561033d57600080fd5b506102a460055481565b34801561035357600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561038757600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b3480156103bb57600080fd5b506102a460045481565b3480156103d157600080fd5b506102a46103e03660046130c6565b600b6020526000908152604090205481565b3480156103fe57600080fd5b5061041261040d3660046130c6565b6109e4565b6040516102ae9190613105565b34801561042b57600080fd5b506102a460065481565b34801561044157600080fd5b506102a46104503660046130c6565b610dca565b34801561046157600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561049557600080fd5b506102a46104a43660046130c6565b60096020526000908152604090205481565b3480156104c257600080fd5b506104cb611041565b005b3480156104d957600080fd5b506104cb6111d9565b3480156104ee57600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561052257600080fd5b506105366105313660046130c6565b611385565b6040516102ae9190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b34801561058e57600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b3480156105c257600080fd5b506104cb611bb8565b3480156105d757600080fd5b506105ff7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102ae565b34801561062357600080fd5b506102a460035481565b34801561063957600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561066d57600080fd5b506105ff7f000000000000000000000000000000000000000000000000000000000000000081565b6104cb6106a336600461311f565b611bca565b3480156106b457600080fd5b506000546001600160a01b03166105ff565b3480156106d257600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561070657600080fd5b50600f546105ff906001600160a01b031681565b34801561072657600080fd5b506103216107353660046130c6565b600e6020526000908152604090205460ff1681565b34801561075657600080fd5b5061075f61206d565b604080519384526020840192909252908201526060016102ae565b34801561078657600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b3480156107ba57600080fd5b506104cb612446565b3480156107cf57600080fd5b5060025461032190610100900460ff1681565b3480156107ee57600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561082257600080fd5b506102a46108313660046130c6565b600d6020526000908152604090205481565b34801561084f57600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561088357600080fd5b506102a46108923660046130c6565b60086020526000908152604090205481565b3480156108b057600080fd5b506104cb6124f5565b3480156108c557600080fd5b506104cb612505565b3480156108da57600080fd5b506102a46108e93660046130c6565b60076020526000908152604090205481565b34801561090757600080fd5b506104cb6109163660046130c6565b61275b565b34801561092757600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561095b57600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561098f57600080fd5b506102a461099e3660046130c6565b600c6020526000908152604090205481565b3480156109bc57600080fd5b506102a47f000000000000000000000000000000000000000000000000000000000000000081565b60025460009060ff161580610a1857507f000000000000000000000000000000000000000000000000000000000000000042105b15610a2557506000919050565b7f00000000000000000000000000000000000000000000000000000000000000004210158015610a7457507f000000000000000000000000000000000000000000000000000000000000000042105b15610a8157506001919050565b7f00000000000000000000000000000000000000000000000000000000000000004210158015610ac857506001600160a01b03821660009081526007602052604090205415155b15610ad557506002919050565b7f00000000000000000000000000000000000000000000000000000000000000004210158015610b2457507f000000000000000000000000000000000000000000000000000000000000000042105b8015610b4657506001600160a01b038216600090815260076020526040902054155b8015610b6957506001600160a01b0382166000908152600a602052604090205415155b15610b7657506003919050565b7f00000000000000000000000000000000000000000000000000000000000000004210158015610bbd57506001600160a01b0382166000908152600b602052604090205415155b15610bca57506004919050565b7f00000000000000000000000000000000000000000000000000000000000000004210158015610c1957507f000000000000000000000000000000000000000000000000000000000000000042105b8015610c3b57506001600160a01b0382166000908152600b6020526040902054155b8015610c5e57506001600160a01b0382166000908152600a602052604090205415155b15610c6b57506005919050565b7f00000000000000000000000000000000000000000000000000000000000000004210158015610cb257506001600160a01b0382166000908152600a602052604090205415155b15610cbf57506006919050565b7f00000000000000000000000000000000000000000000000000000000000000004210158015610d0e57507f000000000000000000000000000000000000000000000000000000000000000042105b8015610d3257506001600160a01b0382166000908152600e602052604090205460ff165b15610d3f57506007919050565b7f000000000000000000000000000000000000000000000000000000000000000042118015610d8657506001600160a01b0382166000908152600e602052604090205460ff165b8015610db557506001600160a01b0382166000908152600d6020908152604080832054600c9092529091205414155b15610dc257506008919050565b506009919050565b6000610dd46127d4565b6001600160a01b0382166000908152600e602052604090205460ff16610df957600080fd5b7f0000000000000000000000000000000000000000000000000000000000000000421015610e655760405162461bcd60e51b81526020600482015260146024820152731b9bdd0818db185a5b55995cdd1a5b99c81e595d60621b60448201526064015b60405180910390fd5b6008610e70836109e4565b6009811115610e8157610e816130ef565b14610e9e5760405162461bcd60e51b8152600401610e5c9061315c565b6000610eea7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006131a9565b4210610f0f57506001600160a01b0382166000908152600c6020526040902054610f7f565b6001600160a01b0383166000908152600c6020526040902054610f7c90610f567f0000000000000000000000000000000000000000000000000000000000000000426131bc565b7f000000000000000000000000000000000000000000000000000000000000000061282d565b90505b6001600160a01b0383166000908152600d6020526040812054610fa290836131bc565b6001600160a01b038086166000908152600d60205260409020849055909150610fee907f00000000000000000000000000000000000000000000000000000000000000001685836128e2565b604080516001600160a01b0386168152602081018390527ffbed6a2445b2fb12101a9cd62317dad46e867f7cc92f27c85f5427ad972491d2910160405180910390a191505061103c60018055565b919050565b6110496127d4565b7f00000000000000000000000000000000000000000000000000000000000000004210156110a95760405162461bcd60e51b815260206004820152600d60248201526c1b9bdd08189bdb9d5cc81e595d609a1b6044820152606401610e5c565b60046110b4336109e4565b60098111156110c5576110c56130ef565b146110e25760405162461bcd60e51b8152600401610e5c9061315c565b336000908152600b602052604081205460068054919283926111059084906131a9565b909155505060008190036111535760405162461bcd60e51b81526020600482015260156024820152746e6f74207a65726f2066696e616c2076616c75657360581b6044820152606401610e5c565b336000818152600b6020526040812055611198907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690836128e2565b60405181815233907f49b737950c44e6ab2219a0bfd40fbfa3112502435d424e3c1e00a1c4e0d2603d9060200160405180910390a2506111d760018055565b565b6111e1612945565b600254610100900460ff1661122b5760405162461bcd60e51b815260206004820152601060248201526f139bdd08199a5b9a5cda1959081e595d60821b6044820152606401610e5c565b6005546003547f000000000000000000000000000000000000000000000000000000000000000011611292577f000000000000000000000000000000000000000000000000000000000000000060035461128591906131bc565b61128f90826131a9565b90505b60065461129f90826131bc565b6040516370a0823160e01b815230600482015290915060009082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561130b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132f91906131cf565b61133991906131bc565b90506113816113506000546001600160a01b031690565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690836128e2565b5050565b6113be6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006113c9836109e4565b905060008160098111156113df576113df6130ef565b0361141f576040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815250915050919050565b6001816009811115611433576114336130ef565b14806114505750600281600981111561144e5761144e6130ef565b145b15611740576001600160a01b03831660009081526007602052604081205490036114af576040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815250915050919050565b7f0000000000000000000000000000000000000000000000000000000000000000600354106116ed576001600160a01b03831660009081526007602052604081205460035461153291906115237f0000000000000000000000000000000000000000000000000000000000000000836131e8565b61152d9190613215565b61299f565b6001600160a01b0385166000908152600760205260408120549192509061155a9083906131bc565b600254909150600090610100900460ff16156115785760055461160d565b6003546040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156115df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160391906131cf565b61160d91906131bc565b6004546001600160a01b038816600090815260086020526040812054929350916116389084906131e8565b6116429190613215565b905060007f00000000000000000000000000000000000000000000000000000000000000006116917f0000000000000000000000000000000000000000000000000000000000000000876131e8565b61169b9190613215565b6040805160c0810182526001600160a01b03909a16600090815260076020908152828220548c528b01839052908a019390935260608901949094525060808701929092525060a0850152509192915050565b50506040805160c0810182526001600160a01b039092166000818152600760208181528483205480875281870184905294860183905292825290915260608301919091526080820181905260a082015290565b6003816009811115611754576117546130ef565b14806117715750600481600981111561176f5761176f6130ef565b145b156117e15750506040805160c0810182526001600160a01b03909216600081815260096020908152838220548552828252600a80825284832054828701819052848452600b835285842054958701959095526060860183905292825291909152608083019190915260a082015290565b60058160098111156117f5576117f56130ef565b036118595750506040805160c0810182526001600160a01b03909216600081815260096020908152838220548552828252600a808252848320548287018190529486018390526060860183905292825291909152608083019190915260a082015290565b600681600981111561186d5761186d6130ef565b03611938576001600160a01b0383166000908152600a6020526040812054670de0b6b3a7640000906118c0907f0000000000000000000000000000000000000000000000000000000000000000906131e8565b6118ca9190613215565b6040805160c0810182526001600160a01b038716600081815260096020908152848220548452828252600a808252858320548286018190529585018390526060850183905260808501879052929091525291925060a082019061192e9084906131bc565b9052949350505050565b600781600981111561194c5761194c6130ef565b036119b05750506040805160c0810182526001600160a01b03909216600081815260096020908152838220548552828252600c808252848320548287018190529486018390526060860183905292825291909152608083019190915260a082015290565b60088160098111156119c4576119c46130ef565b03611b4f576000611a157f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006131a9565b4210611a3a57506001600160a01b0383166000908152600c6020526040902054611a84565b6001600160a01b0384166000908152600c6020526040902054611a8190610f567f0000000000000000000000000000000000000000000000000000000000000000426131bc565b90505b6001600160a01b0384166000908152600d6020526040812054611aa790836131bc565b6040805160c0810182526001600160a01b038816600081815260096020908152848220548452918152600d825283812054600c835293902054939450909290830191611af2916131bc565b81526000602080830182905260408084018390526001600160a01b038a168352600d825280832054600c909252909120546060909201918491611b34916131bc565b611b3e91906131bc565b815260200191909152949350505050565b6009816009811115611b6357611b636130ef565b03611bb25750506040805160c0810182526001600160a01b039092166000908152600960209081528282205484528301819052908201819052606082018190526080820181905260a082015290565b50919050565b611bc0612945565b6111d760006129b9565b611bd26127d4565b6040516370a0823160e01b815233600482015283907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5c91906131cf565b1015611caa5760405162461bcd60e51b815260206004820152601e60248201527f496e73756666696369656e742075736572205553442b2062616c616e636500006044820152606401610e5c565b600f546040516306253ecb60e21b81526001600160a01b0390911690631894fb2c90611cde90339086908690600401613237565b600060405180830381600087803b158015611cf857600080fd5b505af1158015611d0c573d6000803e3d6000fd5b505060025460ff169150508015611d4357507f00000000000000000000000000000000000000000000000000000000000000004210155b8015611d6e57507f000000000000000000000000000000000000000000000000000000000000000042105b611dcf5760405162461bcd60e51b815260206004820152602c60248201527f43616e206f6e6c79206465706f736974205553442b20647572696e672074686560448201526b081cd85b19481c195c9a5bd960a21b6064820152608401610e5c565b33600090815260076020526040902054611dea9084906131a9565b7f000000000000000000000000000000000000000000000000000000000000000011158015611e545750336000908152600760205260409020547f000000000000000000000000000000000000000000000000000000000000000090611e519085906131a9565b11155b611eb75760405162461bcd60e51b815260206004820152602e60248201527f436f6d6d69746d656e7420616d6f756e74206973206f7574736964652074686560448201526d20616c6c6f7765642072616e676560901b6064820152608401610e5c565b6001611ec2336109e4565b6009811115611ed357611ed36130ef565b14611ef05760405162461bcd60e51b8152600401610e5c9061315c565b611f256001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612a09565b3360009081526007602052604081208054859290611f449084906131a9565b90915550611f749050427f00000000000000000000000000000000000000000000000000000000000000006131bc565b611f7e90846131e8565b3360009081526008602052604081208054909190611f9d9084906131a9565b90915550611fcd9050427f00000000000000000000000000000000000000000000000000000000000000006131bc565b611fd790846131e8565b60046000828254611fe891906131a9565b9091555050336000908152600960205260408120805485929061200c9084906131a9565b92505081905550826003600082825461202591906131a9565b909155505060405183815233907f5e1dd8c4451717d5ca4ffbefdada35e22e0871220b9ed9dd03a351f0938c5ed79060200160405180910390a261206860018055565b505050565b600080600061207a6127d4565b7f000000000000000000000000000000000000000000000000000000000000000042116121005760405162461bcd60e51b815260206004820152602e60248201527f43616e206f6e6c7920636c61696d20746f6b656e73206166746572207468652060448201526d1cd85b19481a185cc8195b99195960921b6064820152608401610e5c565b3360009081526007602052604090205461215c5760405162461bcd60e51b815260206004820152601f60248201527f596f752068617665206e6f74206465706f736974656420616e79205553442b006044820152606401610e5c565b6002612167336109e4565b6009811115612178576121786130ef565b146121955760405162461bcd60e51b8152600401610e5c9061315c565b600254610100900460ff166121ac576121ac612a47565b7f000000000000000000000000000000000000000000000000000000000000000060035410612389573360009081526007602052604081205460035461221791906115237f0000000000000000000000000000000000000000000000000000000000000000836131e8565b33600090815260076020526040812054919250906122369083906131bc565b600454600554336000908152600860205260408120549394509261225a91906131e8565b6122649190613215565b905060007f00000000000000000000000000000000000000000000000000000000000000006122b37f0000000000000000000000000000000000000000000000000000000000000000866131e8565b6122bd9190613215565b336000908152600760209081526040808320839055600a8252808320849055600b90915281208490556006805492935085929091906122fd9084906131a9565b9091555061233790506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633856128e2565b604080518481526020810183905290810183905233907fe25dbc2a67a76c6b285465c3a09eb9c20d692944629a166922fbfee37d9ae7a29060600160405180910390a291955090935091506124389050565b33600090815260076020526040812080549082905560068054919283926123b19084906131a9565b909155506123eb90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836128e2565b6040805182815260006020820181905281830152905133917fe25dbc2a67a76c6b285465c3a09eb9c20d692944629a166922fbfee37d9ae7a2919081900360600190a29250600091508190505b61244160018055565b909192565b61244e612945565b60025460ff16156124935760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481cdd185c9d1959608a1b6044820152606401610e5c565b6002805460ff191660011790556111d76001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633307f0000000000000000000000000000000000000000000000000000000000000000612a09565b6124fd612945565b6111d7612a47565b61250d6127d4565b7f000000000000000000000000000000000000000000000000000000000000000042101561257d5760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420636c61696d53616c65734669727374506172742079657400000000006044820152606401610e5c565b6006612588336109e4565b6009811115612599576125996130ef565b146125b65760405162461bcd60e51b8152600401610e5c9061315c565b336000908152600a60205260408120549081900361260e5760405162461bcd60e51b81526020600482015260156024820152746e6f74207a65726f2066696e616c2076616c75657360581b6044820152606401610e5c565b336000908152600a60205260408120819055670de0b6b3a76400006126537f0000000000000000000000000000000000000000000000000000000000000000846131e8565b61265d9190613215565b336000908152600e602052604090205490915060ff16156126b55760405162461bcd60e51b8152602060048201526012602482015271185b1c9958591e481c9959da5cdd195c995960721b6044820152606401610e5c565b336000818152600c60209081526040808320859055600e9091529020805460ff1916600117905561271b906126ea83856131bc565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906128e2565b60405182815233907f39631b2f316cc07f5be357d18aabbb5a2826625a1c6a9799d741312934fce8d09060200160405180910390a250506111d760018055565b612763612945565b6001600160a01b0381166127c85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610e5c565b6127d1816129b9565b50565b6002600154036128265760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610e5c565b6002600155565b60008080600019858709858702925082811083820303915050806000036128675783828161285d5761285d6131ff565b04925050506128db565b80841161287357600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b6040516001600160a01b03831660248201526044810182905261206890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612e64565b6000546001600160a01b031633146111d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610e5c565b60008183106129ae57816129b0565b825b90505b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052612a419085906323b872dd60e01b9060840161290e565b50505050565b7f00000000000000000000000000000000000000000000000000000000000000004211612ac75760405162461bcd60e51b815260206004820152602860248201527f43616e206f6e6c792066696e697368206166746572207468652073616c652068604482015267185cc8195b99195960c21b6064820152608401610e5c565b600254610100900460ff1615612b125760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48199a5b9a5cda195960821b6044820152606401610e5c565b6002805461ff0019166101001790556003547f000000000000000000000000000000000000000000000000000000000000000011612c29576000612b787f000000000000000000000000000000000000000000000000000000000000000060035461299f565b9050612b8f6113506000546001600160a01b031690565b612c23612ba46000546001600160a01b031690565b7f0000000000000000000000000000000000000000000000000000000000000000612bef7f0000000000000000000000000000000000000000000000000000000000000000856131e8565b612bf99190613215565b6126ea907f00000000000000000000000000000000000000000000000000000000000000006131bc565b50612d6a565b612d04612c3e6000546001600160a01b031690565b6003546040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc991906131cf565b612cd391906131bc565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906128e2565b612d6a612d196000546001600160a01b031690565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907f00000000000000000000000000000000000000000000000000000000000000006128e2565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df291906131cf565b6005556003547f0000000000000000000000000000000000000000000000000000000000000000116111d7577f0000000000000000000000000000000000000000000000000000000000000000600354612e4c91906131bc565b60056000828254612e5d91906131bc565b9091555050565b6000612eb9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f369092919063ffffffff16565b8051909150156120685780806020019051810190612ed7919061326c565b6120685760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610e5c565b6060612f458484600085612f4d565b949350505050565b606082471015612fae5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610e5c565b600080866001600160a01b03168587604051612fca91906132b2565b60006040518083038185875af1925050503d8060008114613007576040519150601f19603f3d011682016040523d82523d6000602084013e61300c565b606091505b509150915061301d87838387613028565b979650505050505050565b60608315613097578251600003613090576001600160a01b0385163b6130905760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e5c565b5081612f45565b612f4583838151156130ac5781518083602001fd5b8060405162461bcd60e51b8152600401610e5c91906132ce565b6000602082840312156130d857600080fd5b81356001600160a01b03811681146128db57600080fd5b634e487b7160e01b600052602160045260246000fd5b60208101600a8310613119576131196130ef565b91905290565b60008060006060848603121561313457600080fd5b833592506020840135915060408401356002811061315157600080fd5b809150509250925092565b6020808252601a908201527f496e617070726f70726961746520757365722773207374617465000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156129b3576129b3613193565b818103818111156129b3576129b3613193565b6000602082840312156131e157600080fd5b5051919050565b80820281158282048414176129b3576129b3613193565b634e487b7160e01b600052601260045260246000fd5b60008261323257634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b038416815260208101839052606081016002831061325e5761325e6130ef565b826040830152949350505050565b60006020828403121561327e57600080fd5b815180151581146128db57600080fd5b60005b838110156132a9578181015183820152602001613291565b50506000910152565b600082516132c481846020870161328e565b9190910192915050565b60208152600082518060208401526132ed81604085016020870161328e565b601f01601f1916919091016040019291505056fea26469706673582212206c81d8599cfefd4da790ed81931944bbc69feb347c56b65d2c0258f8b2fb866a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimBonus()": {
        "details": "Claim bonus (rebase) USD+ Executing only after \"claimRefund\" Transfer bonus USD+ to user."
      },
      "claimRefund()": {
        "details": "Claim extra USD+ if total_commit > hard_cap Executing only after end pre-sale. Transfer extra USD+ to user. Calculating also next params: - finalSales (total OVN user should to get) - finalCommit  (total rebase of USD+ user should to get)"
      },
      "claimSalesFirstPart()": {
        "details": "Claim 1 first part of OVN (25% depends from vestingProportion) Executing only after \"claimBonus\" Transfer OVN to user."
      },
      "claimVesting(address)": {
        "details": "Claim unlock OVN tokens by time (vesting) Transfer OVN to user."
      },
      "commit(uint256,uint256,uint8)": {
        "details": "Buy SalesTokens (OVN) for commitTokens (USD+) Execute only by User User should to have Whitelist NFT other transaction revert by error: `!whitelist`",
        "params": {
          "amount": "- amount USD+ for buy OVN",
          "tokenId": "- Whitelist NFT ID",
          "typeNft": "- NFT from Galxe(Service) or OVN Partners (Partner)"
        }
      },
      "finish()": {
        "details": "Finish PRE-SALE  Can execute by Owner in end pre sale  Can execute by user when call claimRefund"
      },
      "getCommitExcess()": {
        "details": "Claim excess USD+ after finished pre-sale excess USD+ appear due to rebase NOT AFFECT USERS BONUS"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "start()": {
        "details": "Run Pre Sale Execute only by Owner Owner should have amount \"totalSales\" on balance"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/OverflowICO.sol:OverflowICO",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/OverflowICO.sol:OverflowICO",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1943,
        "contract": "contracts/OverflowICO.sol:OverflowICO",
        "label": "started",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1945,
        "contract": "contracts/OverflowICO.sol:OverflowICO",
        "label": "finished",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1947,
        "contract": "contracts/OverflowICO.sol:OverflowICO",
        "label": "totalCommitments",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1949,
        "contract": "contracts/OverflowICO.sol:OverflowICO",
        "label": "totalShares",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1951,
        "contract": "contracts/OverflowICO.sol:OverflowICO",
        "label": "totalCommitToBonus",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1953,
        "contract": "contracts/OverflowICO.sol:OverflowICO",
        "label": "commitTakenAway",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1957,
        "contract": "contracts/OverflowICO.sol:OverflowICO",
        "label": "commitments",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1961,
        "contract": "contracts/OverflowICO.sol:OverflowICO",
        "label": "shares",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1965,
        "contract": "contracts/OverflowICO.sol:OverflowICO",
        "label": "immutableCommitments",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1969,
        "contract": "contracts/OverflowICO.sol:OverflowICO",
        "label": "finalSales",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1973,
        "contract": "contracts/OverflowICO.sol:OverflowICO",
        "label": "finalCommit",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1977,
        "contract": "contracts/OverflowICO.sol:OverflowICO",
        "label": "claimableTotal",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1981,
        "contract": "contracts/OverflowICO.sol:OverflowICO",
        "label": "claimed",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1985,
        "contract": "contracts/OverflowICO.sol:OverflowICO",
        "label": "registered",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1988,
        "contract": "contracts/OverflowICO.sol:OverflowICO",
        "label": "whitelist",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IWhitelist)1836"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IWhitelist)1836": {
        "encoding": "inplace",
        "label": "contract IWhitelist",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
